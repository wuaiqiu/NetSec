								John the ripper
								
	

	
1.简介



	John the Ripper，是一个快速的密码破解工具，用于在已知密文的情况下尝试破解出明文的破解密码软
	
件，支持目前大多数的加密算法。John the ripper是一款大受欢迎的、基于字典的密码破解工具。它使用内

容全是密码的单词表，然后使用单词表中的每一个密码，试图破解某个特定的密码散列。换句话说，它又叫蛮

力密码破解，这是一种最基本的密码破解方式。不过它也是最耗费时间、最耗费处理器资源的一种方法。尝试

的密码越多，所需的时间就越长。主要目的是破解不够牢固的Unix/Linux系统密码




2.命令

=========================================================================================

	unshadow命令基本上会结合/etc/passwd的数据和/etc/shadow的数据，创建1个含有用户名和密码详细信
	
息的文件。
	
	unshadow /etc/passwd /etc/shadow > ~/file_to_crack
	
	
======================================================================================	
	
	john [-功能选项] [密码文件名]
	
	

	
	(1)-pwfile:<file>[,..]				#用于指定存放密文所在的文件名，(可以输入多个，文件名用“，”
			
分隔，也可以使用*)。也可以不使用此参数，将文件名放在命令行的最后即可。



	(2)-wordlist:<字典文件名>			#指定的用于解密用的字典文件名。
	

	
	(3)-rules							#在解密过程中使用单词规则变化功能。如将尝试cool单词的其他可能，
	
如COOLER、Cool等，详细规则可以在JOHN.INI文件中的[List.Rules:Wordlist]部分查到


	(4)-incremental[:<模式名称>]		#使用遍历模式，就是组合密码的所有可能情况，同样可以在JOHN.INI文
	
件中的[Incremental:*****]部分查到 来破解，在配置文件中有[Incremental:All]，[Incremental:Alpha]，

[Incremental:Digits]，[Incremental:Alnum]，[Incremental:LanMan]等模块。每个模块名在run下都有对应的

date文件。 


	(5)-single							#使用单一模式进行解密，主要是根据用户名产生变化来猜测解密，可以
	
消灭笨蛋用户。其组合规则可以在JOHN.INI文件中的[List.Rules:Single]部分查到


   (6)-external:<模式名称>				#使用自定义的扩展解密模式,你可以在john.ini中定义自己需要的密码组
   
合方式。JOHN也在INI文件中给出了几个示例，在INI文件的[List.External:******]中所定义的自订破解功能。


   (7)-session[:记录会话文件名]			#这个选项是设定当前记录档（session file）的档名。所谓的工作记录
   
档就是可以用「-restore」参数恢复工作的档案。


   (8)-restore[:<文件名>]				#继续上次的破解工作，JOHN被中断后，当前的解密进度情况被存放在
   
RESTORE文件中，你可以拷贝这个文件到一个新的文件中。如果参数后不带文件名，JOHN默认使用RESTORE文件。


   (9)-makechars:<文件名>				#制作『字元频率表』。这个选项会以目前以破解出的密码为基础，来
	
产生『字元频率表』（注：John会把已破解出的密码记录在JOHN.POT文档内）。如果所指定档名的文档已经存在的

话，会被复写。此选项产生出来的文档，可以用在『增强』（第三种）破解模式上。。 


	(9)-show							#显示已经破解出的密码，因为JOHN.POT文件中并不包含用户名，同时你应
	
该输入相应的包含密码的文件名，JOHN会输出已经被解密的用户连同密码的详细表格。

				john --show passwd.txt 查看密码和用户


	(10)-test							#测试当前机器运行JOHN的解密速度
	
	
	(11)-users:[-]LOGIN｜UID [,..] 		#只破解某个「用户」的密码，如只针对root或拥有root权利UID=0的
	
	
使用者。（若在LOGIN｜UID名前加上“－”符号则是相反，表示不要破解这个「账号」的密码）
		
	


	
3.举例



	(1)、先消灭FOOLUSER，就是“笨蛋用户”：

			john -single shadow.txt
			
		根据用户的名称，加上常见的变化而猜测密码。一般所谓的笨蛋是这样的，比如此用户叫fool，而他的
		
密码是fool123、fool1、loof、loof123、lofo...。这样的用户一般在一分钟内会被全部消灭。


   

	(2)、再消灭稍微聪明一点的用户：

			john -wordfile:password.lst -rules shadow.txt
   
		使用字典文件来进行解密，不为什么，只是因为设置密码的是人而不是机器，如人们常用hello、superman
		
、cooler、asdfgh、 123456等作为自己的密码。而-rules参数则在此基础上再加上些变化，如字典中有单词cool，

则JOHN还会尝试使用cooler、CoOl、 Cool等单词变化进行解密。一般视SHADOW中的用户多少及你的字典大小、你的

机器速度，解密时间从几小时到几天不等。



	(3)、最后进行大屠杀：

			john -incremental:all shadow.txt
    
		纯粹的碰运气解法，主要原理是遍历所有可能的密匙空间。JOHN会尝试以95个字母(因为从键盘上只能输
		
入95种可能的键值)进行1-8(8个字 母是密码的最长值，所有密码中8位以后的部分均不会被使用，目前的DES加密

体系就是这样的)个长度的所有组合，这是很漫长的过程